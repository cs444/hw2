diff -Naur block/clook-iosched.c block2/clook-iosched.c
--- block/clook-iosched.c	1969-12-31 16:00:00.000000000 -0800
+++ block2/clook-iosched.c	2018-10-27 14:44:37.630009587 -0700
@@ -0,0 +1,171 @@
+//elevator noop 
+//noop-iosched.c
+//modified to perform a clook algrithm
+
+#include <linux/blkdev.h>
+#include <linux/elevator.h>
+#include <linux/bio.h>
+#include <linux/module.h>
+#include <linux/slab.h>
+#include <linux/init.h>
+
+// set default val
+int diskhead = -1;
+
+//struct noop_data {
+//	struct list_head queue;
+//};
+
+struct clook_data {
+	struct list_head queue;
+};
+
+static void clook_merged_requests(struct request_queue *q, struct request *rq, struct request *next) {
+	list_del_init(&next->queuelist);	// delete
+	elv_dispatch_sort(q, next);			// sort
+}
+
+static int clook_dispatch(struct request_queue *q, int force) {
+	struct clook_data *nd = q->elevator->elevator_data;
+	char direction;
+
+	if (!list_empty(&nd->queue)) {
+		struct request *rq;
+		rq = list_entry(nd->queue.next, struct request, queuelist);
+		list_del_init(&rq->queuelist);
+		elv_dispatch_sort(q, rq);
+		
+		// locate diskhead
+		diskhead = blk_rq_pos(rq);
+
+		// if request is read or write
+		
+		if (rq_data_dir(rq) == READ) direction = 'R';
+		else direction = 'W';
+		printk("[CLOOK] dsp %c %lu\n", direction, (long unsigned)blk_rq_pos(rq));
+
+		return 1;
+	}
+	return 0;
+}
+
+static void clook_add_request(struct request_queue *q, struct request *rq) {
+	struct clook_data *nd = q->elevator->elevator_data;
+	struct list_head *cur = NULL;
+	char direction;
+
+	list_for_each(cur, &nd->queue)
+	{
+		struct request *c = list_entry(cur, struct request, queuelist);
+		
+		// find cur smaller than diskhead and greater than request
+		if (blk_rq_pos(rq) > diskhead)
+		{
+			// if cur position less than diskhead
+			// or request position less than cur position
+			// add cur position
+			if(blk_rq_pos(c) < diskhead || blk_rq_pos(rq) < blk_rq_pos(c))
+				break;
+			
+		} 
+		else {
+			// if cur position less than diskhead
+			// and request position less than cur position
+			// add cur position
+			if(blk_rq_pos(c) < diskhead && blk_rq_pos(rq) < blk_rq_pos(c))
+				break;
+		}
+	}
+
+	// if request is read or write
+	
+	if (rq_data_dir(rq) == READ) direction = 'R';
+	else direction = 'W';
+	printk("[CLOOK] add %c %lu\n", direction, (long unsigned)blk_rq_pos(rq));
+
+	// add cur
+	list_add_tail(&rq->queuelist, cur);
+}
+
+//static int clook_queue_empty(struct request_queue *q) {
+//	struct clook_data *nd = q->elevator->elevator_data;
+//
+//	return list_empty(&nd->queue);
+//}
+
+static struct request *clook_former_request(struct request_queue *q, struct request *rq) {
+	struct clook_data *nd = q->elevator->elevator_data;
+
+	if (rq->queuelist.prev == &nd->queue) return NULL;
+
+	return list_entry(rq->queuelist.prev, struct request, queuelist);
+}
+
+static struct request *clook_latter_request(struct request_queue *q, struct request *rq) {
+	struct clook_data *nd = q->elevator->elevator_data;
+
+	if (rq->queuelist.next == &nd->queue) return NULL;
+	
+	return list_entry(rq->queuelist.next, struct request, queuelist);
+}
+
+static int clook_init_queue(struct request_queue *q, struct elevator_type *e) {
+	struct clook_data *nd;
+	struct elevator_queue *eq;
+	
+	eq = elevator_alloc(q, e);
+	if(!eq)
+		return -ENOMEM;
+	
+	nd = kmalloc_node(sizeof(*nd), GFP_KERNEL, q->node);
+	if (!nd) {
+		kobject_put(&eq->kobj);
+		return -ENOMEM;
+	}
+	eq->elevator_data = nd;
+	
+	INIT_LIST_HEAD(&nd->queue);
+	
+	spin_lock_irq(q->queue_lock);
+	q->elevator = eq;
+	spin_unlock_irq(q->queue_lock);
+	
+	return 0;
+}
+
+static void clook_exit_queue(struct elevator_queue *e) {
+	struct clook_data *nd = e->elevator_data;
+
+	BUG_ON(!list_empty(&nd->queue));
+	kfree(nd);
+}
+
+static struct elevator_type elevator_clook = {
+	.ops = {
+		.elevator_merge_req_fn		= clook_merged_requests,
+		.elevator_dispatch_fn		= clook_dispatch,
+		.elevator_add_req_fn		= clook_add_request,
+		//.elevator_queue_empty_fn	= clook_queue_empty,
+		.elevator_former_req_fn		= clook_former_request,
+		.elevator_latter_req_fn		= clook_latter_request,
+		.elevator_init_fn		= clook_init_queue,
+		.elevator_exit_fn		= clook_exit_queue,
+	},
+	.elevator_name = "clook",
+	.elevator_owner = THIS_MODULE,
+};
+
+static int __init clook_init(void) {
+	return elv_register(&elevator_clook);
+}
+
+static void __exit clook_exit(void) {
+	elv_unregister(&elevator_clook);
+}
+
+module_init(clook_init);
+module_exit(clook_exit);
+
+MODULE_AUTHOR("Jiawei Mo");
+MODULE_LICENSE("GPL");
+MODULE_DESCRIPTION("clook IO Scheduler");
\ No newline at end of file
diff -Naur block/Kconfig.iosched block2/Kconfig.iosched
--- block/Kconfig.iosched	2018-10-27 14:41:33.792982113 -0700
+++ block2/Kconfig.iosched	2018-10-27 14:45:31.953923931 -0700
@@ -32,6 +32,12 @@
 
 	  This is the default I/O scheduler.
 
+config IOSCHED_CLOOK
+    tristate "C-LOOK"
+    default y
+    ---help---
+      C-LOOK I/O scheduler
+
 config CFQ_GROUP_IOSCHED
 	bool "CFQ Group Scheduling support"
 	depends on IOSCHED_CFQ && BLK_CGROUP
@@ -55,6 +61,9 @@
 	config DEFAULT_NOOP
 		bool "No-op"
 
+	config DEFAULT_CLOOK
+		bool "C-LOOK" if IOSCHED_CLOOK
+
 endchoice
 
 config DEFAULT_IOSCHED
@@ -62,6 +71,7 @@
 	default "deadline" if DEFAULT_DEADLINE
 	default "cfq" if DEFAULT_CFQ
 	default "noop" if DEFAULT_NOOP
+	default "clook" if DEFAULT_CLOOK
 
 endmenu
 
diff -Naur block/Makefile block2/Makefile
--- block/Makefile	2018-10-27 14:41:33.795982166 -0700
+++ block2/Makefile	2018-10-27 14:45:08.740539790 -0700
@@ -23,3 +23,4 @@
 obj-$(CONFIG_BLK_CMDLINE_PARSER)	+= cmdline-parser.o
 obj-$(CONFIG_BLK_DEV_INTEGRITY) += bio-integrity.o blk-integrity.o t10-pi.o
 
+obj-$(CONFIG_IOSCHED_CLOOK)	+= clook-iosched.o
\ No newline at end of file
